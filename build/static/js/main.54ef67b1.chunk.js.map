{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","jumpTo","step","setState","slice","length","calculateWinner","concat","status","current","winner","draw","isFull","moves","map","move","desc","key","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kMAKA,SAASA,EAAOC,GAEZ,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAMTC,E,qLAESC,GAAI,IAAD,OACd,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAKH,QAAU,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAKjF,OACE,6BAEE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAxBTC,IAAMC,WA+BpBC,E,2MAEJC,MAAQ,CACNC,QAAU,CAAC,CACTN,QAAUO,MAAM,GAAGC,KAAK,QAE1BC,WAAa,EACbC,SAAU,G,EAqBdC,OAAO,SAACC,GACN,EAAKC,SAAS,CACVJ,WAAYG,EACZF,QAAUE,EAAO,IAAO,K,2EArBhBd,GAEV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQQ,MAAM,EAAGf,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQS,OAAS,GACjBf,QAAQc,QAE5BE,EAAgBhB,IAAUA,EAAQF,KACtCE,EAAQF,GAAIC,KAAKM,MAAMK,QAAS,IAAM,IACtCX,KAAKc,SAAS,CACdP,QAASA,EAAQW,OAAO,CAAC,CACrBjB,QAASA,KAEbS,WAAYH,EAAQS,OACpBL,SAAWX,KAAKM,MAAMK,a,+BAYd,IACJQ,EAgEelB,EAjEZ,OAEDM,EAAUP,KAAKM,MAAMC,QACrBa,EAAUb,EAAQP,KAAKM,MAAMI,YAC7BW,EAASJ,EAAgBG,EAAQnB,SACjCqB,GA6DHL,EADgBhB,EA5DQmB,EAAQnB,UAmDvC,SAAgBA,GACd,IAAK,IAAIF,EAAE,EAAGA,EAAE,EAAGA,IACjB,GAAgB,MAAZE,EAAQF,GACZ,OAAO,EAET,OAAO,EAK0BwB,CAAOtB,GAC/B,cAEI,KA5DEkB,EAATE,EAAkB,WAAaA,EAC1BC,GACO,iBAAoBtB,KAAKM,MAAMK,QAAS,IAAM,KAC9D,IAAMa,EAAQjB,EAAQkB,KAAI,SAACZ,EAAMa,GACjC,IAAMC,EAAOD,EAAO,eAAeA,EAAO,mBAC1C,OACI,wBAAIE,IAAKF,GACP,4BAAQ/B,UAAU,SAASC,QAAS,kBAAM,EAAKgB,OAAOc,KAAQC,OAKpE,OACE,yBAAKhC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CAAOG,QAASmB,EAAQnB,QAASL,QAAW,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,OAEtE,yBAAKJ,UAAU,aACb,6BAAMwB,GACN,wBAAIxB,UAAU,MAAM6B,S,GA/DXrB,IAAMC,WAsEzB,SAASa,EAAgBhB,GAWvB,IAVA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA/B,EAAI,EAAGA,EAAI+B,EAAMd,OAAQjB,IAAK,CAAC,IAAD,cACnB+B,EAAM/B,GADa,GAC9BgC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAqBTG,IAASC,OACP,kBAAC9B,EAAD,MACA+B,SAASC,eAAe,U","file":"static/js/main.54ef67b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) {\r\n  \r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    )\r\n  \r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) { \r\n    return <Square value={this.props.squares[i]}  onClick={ () => this.props.onClick(i)}/>\r\n  }\r\n\r\n  render() {\r\n  \r\n    return (\r\n      <div>\r\n        \r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  state = {\r\n    history : [{\r\n      squares : Array(9).fill(null)\r\n    }],\r\n    stepNumber : 0,\r\n    xIsNext : true\r\n  }\r\n  \r\n  handleClick(i) {\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares)||squares[i]){return}\r\n    squares[i]= this.state.xIsNext? 'X' : 'O'\r\n    this.setState({\r\n    history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n    stepNumber: history.length,\r\n    xIsNext : !this.state.xIsNext,\r\n    \r\n  });\r\n}\r\n\r\njumpTo=(step) => {\r\n  this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n}\r\n\r\n  render() {\r\n    let status;\r\n    const history = this.state.history\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares)\r\n    const draw = calculateDraw(current.squares)\r\n  \r\n\r\n\r\n    if (winner) {status = 'Winner :' + winner;}\r\n    else if (draw) {status = draw}\r\n    else {status = ('Next player: ') + (this.state.xIsNext? 'X' : 'O');}\r\n    const moves = history.map((step, move) => { \r\n    const desc = move ? 'Go to move #'+move : 'Restart The Game'\r\n    return (\r\n        <li key={move}>\r\n          <button className=\"button\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares} onClick = {(i) => this.handleClick(i)} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol className=\"ol\">{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nfunction isFull(squares){\r\n  for (let i=0; i<9; i++) {\r\n    if (squares[i]!=null){continue;}\r\n    return false\r\n  }\r\n  return true\r\n\r\n}\r\n\r\nfunction calculateDraw(squares){\r\n  if (!calculateWinner(squares) && isFull(squares)) {\r\n    return 'It\\'s a Draw'\r\n  }\r\n  else {return null}\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}